{"version":3,"sources":["registerServiceWorker.js","body.jsx","app.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","BODY_QUERY","gql","_templateObject","_taggedTemplateLiteral","Body","Component","constructor","props","super","this","loggedIn","render","appUserProps","customizr","_jsx","Container","fluid","className","children","Query","query","_ref","data","loading","Loading","Error","fault","debugMsg","message","allSettings","generalSettingsTitle","title","generalSettingsDescription","description","homeUrl","url","themeMods","customLogo","logo","root","_jsxs","Row","Header","Menu","wrapper","Col","wrapperCSS","wrapperProps","xs","pills","vertical","siteUrl","Login","BrowserView","renderWithFragment","Sidebar","id","as","justified","Main","Router","Footer","defaultProps","App","clearCurrentUser","bind","returningUser","setCurrentUser","componentWillMount","localStorage","removeItem","setState","authToken","undefined","getItem","setItem","Switch","Route","path","params","graphqlDOM","document","querySelector","endpoint","getAttribute","parentElement","removeChild","httpLink","HttpLink","uri","process","REACT_APP_APOLLO_CLIENT_URI","credentials","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","dataIdFromObject","object","appContainer","getElementById","ReactDOM","ApolloProvider","classList","add","URL","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kOAUA,MAAMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,sCAEhB,CACD,CACF,IAEFC,OAAMC,IACLH,QAAQG,MAAM,4CAA6CA,EAAM,GAEvE,C,6EC1EA,MAAMC,EAAaC,YAAGC,MAAAC,YAAA,+UAkCtB,MAAMC,UAAaC,YACjBC,YAAYC,GACVC,MAAMD,GACNE,KAAKf,MAAQ,CAAEgB,UAAU,EAC3B,CAEAC,SACE,MAAM,aAAEC,EAAY,UAAEC,GAAcJ,KAAKF,MACzC,OACEO,cAACC,IAAS,CAACC,OAAK,EAACC,UAAU,WAAUC,SACnCJ,cAACK,IAAK,CAACC,MAAOpB,EAAWkB,SACtBG,IAA+B,IAA9B,KAAEC,EAAI,MAAEvB,EAAK,QAAEwB,GAASF,EACxB,GAAIE,EAAS,OAAOT,cAACU,QAAO,IAC5B,GAAIzB,EAAO,OAAOe,cAACW,MAAK,CAACC,MAAM,QAAQC,SAAU5B,EAAM6B,UACvD,GAAIN,EAAM,CACR,MACEO,aACEC,qBAAsBC,EACtBC,2BAA4BC,EAC5BC,QAASC,GAEXC,WAAaC,WAAYC,IACvBhB,EACEiB,EAAO1B,EAAY,cAAgB,GAEzC,OACE2B,eAACC,IAAG,CAAAvB,SAAA,CACFsB,eAACE,OAAM,CAAOJ,OAAML,cAAaF,QAAOI,MAAGjB,SAAA,CACzCJ,cAAC6B,KAAI,CACH/D,SAAS,UACTgE,QAASC,IACTC,WAAW,eACXC,aAAc,CAAEC,GAAI,QACpBC,OAAK,EACLC,UAAQ,EACFX,OAAMY,QAAShB,IAGvBrB,cAACsC,MAAK,IACAxC,EACJgC,QAAQ,MACRE,WAAW,gBAGbhC,cAACuC,cAAW,CAACC,oBAAkB,EAAApC,SAC7BJ,cAACyC,QAAO,CACNC,GAAG,YACHC,GAAIZ,IACJ5B,UAAU,oBAIdH,cAAC6B,KAAI,CACH/D,SAAS,SACTgE,QAASC,IACTC,WAAW,oBACXC,aAAc,CAAEC,GAAI,QACpBU,WAAS,EACHnB,OAAMY,QAAShB,OAGzBK,eAACmB,KAAI,CAAAzC,SAAA,CACHJ,cAAC8C,OAAM,CAAOrB,SACdzB,cAAC+C,OAAM,SAIf,MAKV,EAQFzD,EAAK0D,aAAe,CAClBjD,WAAW,GAGET,Q,MCvHf,MAAM2D,UAAY1D,YAChBC,YAAYC,GACVC,MAAMD,GACNE,KAAKuD,iBAAmBvD,KAAKuD,iBAAiBC,KAAKxD,MACnDA,KAAKyD,cAAgBzD,KAAKyD,cAAcD,KAAKxD,MAC7CA,KAAK0D,eAAiB1D,KAAK0D,eAAeF,KAAKxD,MAC/CA,KAAKf,MAAQ,CACXgB,UAAU,EAEd,CAEA0D,qBACE3D,KAAKyD,eACP,CAKAF,mBACEK,aAAaC,WAAW,cACxB7D,KAAK8D,SAAS,CAAEC,eAAWC,EAAW/D,UAAU,GAClD,CAKAwD,gBACE,MAAMM,EAAYH,aAAaK,QAAQ,cACvCjE,KAAK8D,SAAS,CAAEC,YAAW9D,UAAU,GACvC,CAMAyD,eAAeK,GACbH,aAAaM,QAAQ,aAAcH,GACnC/D,KAAK8D,SAAS,CAAEC,YAAW9D,UAAU,GACvC,CAEAC,SACE,MAAM,SAAED,GAAaD,KAAKf,MAC1B,OACE8C,eAACoC,IAAM,CAAA1D,SAAA,CACLJ,cAAC+D,IAAK,CAACC,KAAK,yBAAyBnE,OAAQU,IAAA,IAAGvC,OAAO,OAAEiG,IAAU1D,EAAA,OACxEP,cAACV,EAAI,CACJQ,aAAc,CACdoD,iBAAkBvD,KAAKuD,iBACvBnD,WAAW,EACXsD,eAAgB1D,KAAK0D,eACrBzD,aAEC,IAEGI,cAAC+D,IAAK,CAAClE,OAAQJ,GACbO,cAACV,EAAI,CACHQ,aAAc,CACZoD,iBAAkBvD,KAAKuD,iBACvBG,eAAgB1D,KAAK0D,eACrBzD,kBAMZ,EAGaqD,QClDf,MAAMiB,EAAaC,SAASC,cAAc,YAC1C,IAAIC,EACAH,IACFG,EAAWH,EAAWI,aAAa,iBACnCJ,EAAWK,cAAcC,YAAYN,IAEvC,MAAMO,EAAW,IAAIC,IAAS,CAC5BC,IAAMC,mIAAYC,4BAChBD,mIAAYC,4BAA8BR,EAC5CS,YAAa,gBAKTC,EAAiB,IAAIC,KAAW,CAACC,EAAWC,KAChDD,EAAUE,WAAW,CACnBC,QAAS,CACPC,cAAe9B,aAAaK,QAAQ,eAAiB,QAIlDsB,EAAQD,MAGXK,EAAS,IAAIC,IAAa,CAC9BC,KAAMC,YAAOV,EAAgBN,GAC7BiB,MAAO,IAAIC,IAAc,CACvBC,iBAAkBC,GAAUA,EAAOnD,IAAM,SAKvCoD,EAAe3B,SAAS4B,eAAyD,QAKvFC,IAASnG,OACPG,cAACiG,IAAc,CAACX,OAAQA,EAAOlF,SAC7BJ,cAAC8C,IAAM,CAAA1C,SACLJ,cAACiD,EAAG,QAGR6C,GAGFA,EAAaI,UAAUC,IAAI,UHlDZ,WACb,GAA6C,kBAAmBhI,UAAW,CAGzE,GADkB,IAAIiI,IAAIxB,GAAwB/G,OAAOC,UAC3CuI,SAAWxI,OAAOC,SAASuI,OAIvC,OAGFxI,OAAOyI,iBAAiB,QAAQ,KAC9B,MAAMpI,EAAK,GAAAuH,OAAMb,GAAsB,sBAEnCjH,IAiDV,SAAiCO,GAE/BqI,MAAMrI,GACHI,MAAKkI,IAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASpB,QAAQsB,IAAI,gBAAgBC,QAAQ,cAG7CxI,UAAUC,cAAcwI,MAAMtI,MAAKC,IACjCA,EAAasI,aAAavI,MAAK,KAC7BT,OAAOC,SAASgJ,QAAQ,GACxB,IAIJ7I,EAAgBC,EAClB,IAEDc,OAAM,KACLF,QAAQC,IACN,gEACD,GAEP,CAxEQgI,CAAwB7I,GAIxBC,UAAUC,cAAcwI,MAAMtI,MAAK,KACjCQ,QAAQC,IACN,2GAED,KAIHd,EAAgBC,EAClB,GAEJ,CACF,CGoBA8I,E","file":"static/js/main.596b9e54.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { BrowserView } from \"react-device-detect\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nconst BODY_QUERY = gql`\r\n  query AppQuery {\r\n    allSettings {\r\n      homeUrl\r\n      generalSettingsTitle\r\n      generalSettingsDescription\r\n    }\r\n    themeMods {\r\n      customLogo {\r\n        altText\r\n        sourceUrl\r\n        mediaDetails {\r\n          sizes {\r\n            name\r\n            sourceUrl\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// const TOKEN_REFRESH_MUTATION = gql`\r\n//   mutation RefreshToken($clientId: String!, $authToken: String!){\r\n//     refreshJwtAuthToken(input: { clientMutationId: $clientId, jwtRefreshToken: $authToken }){\r\n//       clientMutationId\r\n//       authToken\r\n//     }\r\n//   }\r\n// `;\r\n\r\n/**\r\n * App Body Component\r\n */\r\nclass Body extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { loggedIn: false };\r\n  }\r\n\r\n  render() {\r\n    const { appUserProps, customizr } = this.props;\r\n    return (\r\n      <Container fluid className=\"app-body\">\r\n        <Query query={BODY_QUERY}>\r\n          {({ data, error, loading }) => {\r\n            if (loading) return <Loading />;\r\n            if (error) return <Error fault=\"query\" debugMsg={error.message} />;\r\n            if (data) {\r\n              const {\r\n                allSettings: {\r\n                  generalSettingsTitle: title,\r\n                  generalSettingsDescription: description,\r\n                  homeUrl: url,\r\n                },\r\n                themeMods: { customLogo: logo },\r\n              } = data;\r\n              const root = customizr ? \"/customizer\" : \"\";\r\n\r\n              return (\r\n                <Row>\r\n                  <Header {...{ logo, description, title, url }}>\r\n                    <Menu\r\n                      location=\"primary\"\r\n                      wrapper={Col}\r\n                      wrapperCSS=\"primary-menu\"\r\n                      wrapperProps={{ xs: \"auto\" }}\r\n                      pills\r\n                      vertical\r\n                      {...{ root, siteUrl: url }}\r\n                    />\r\n\r\n                    <Login\r\n                      {...appUserProps}\r\n                      wrapper=\"div\"\r\n                      wrapperCSS=\"login w-100\"\r\n                    />\r\n\r\n                    <BrowserView renderWithFragment>\r\n                      <Sidebar\r\n                        id=\"sidebar-1\"\r\n                        as={Col}\r\n                        className=\"sidebar w-100\"\r\n                      />\r\n                    </BrowserView>\r\n\r\n                    <Menu\r\n                      location=\"social\"\r\n                      wrapper={Col}\r\n                      wrapperCSS=\"social-menu w-100\"\r\n                      wrapperProps={{ xs: \"auto\" }}\r\n                      justified\r\n                      {...{ root, siteUrl: url }}\r\n                    />\r\n                  </Header>\r\n                  <Main>\r\n                    <Router {...{ root }} />\r\n                    <Footer />\r\n                  </Main>\r\n                </Row>\r\n              );\r\n            }\r\n          }}\r\n        </Query>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nBody.propTypes = {\r\n  appUserProps: PropTypes.shape({}).isRequired,\r\n  customizr: PropTypes.bool,\r\n};\r\n\r\nBody.defaultProps = {\r\n  customizr: false,\r\n};\r\n\r\nexport default Body;\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Body from './body';\r\n\r\nimport './app.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.clearCurrentUser = this.clearCurrentUser.bind(this);\r\n    this.returningUser = this.returningUser.bind(this);\r\n    this.setCurrentUser = this.setCurrentUser.bind(this);\r\n    this.state = {\r\n      loggedIn: false,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.returningUser();\r\n  }\r\n\r\n  /**\r\n   * Clears user authenication token and user state\r\n   */\r\n  clearCurrentUser() {\r\n    localStorage.removeItem('user-token');\r\n    this.setState({ authToken: undefined, loggedIn: false });\r\n  }\r\n\r\n  /**\r\n   * Retrieves existing authentication token and sets user state\r\n   */\r\n  returningUser() {\r\n    const authToken = localStorage.getItem('user-token');\r\n    this.setState({ authToken, loggedIn: true });\r\n  }\r\n\r\n  /**\r\n   * Stores user authenication token and sets user state\r\n   * @param String authToken - user authenication token\r\n   */\r\n  setCurrentUser(authToken) {\r\n    localStorage.setItem('user-token', authToken);\r\n    this.setState({ authToken, loggedIn: true });\r\n  }\r\n\r\n  render() {\r\n    const { loggedIn } = this.state;\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/:customizr(customizr)\" render={({ match: { params } }) => (\r\n\t\t\t<Body\r\n\t\t\t\tappUserProps={{\r\n\t\t\t\tclearCurrentUser: this.clearCurrentUser,\r\n\t\t\t\tcustomizr: true,\r\n\t\t\t\tsetCurrentUser: this.setCurrentUser,\r\n\t\t\t\tloggedIn,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n        )} />\r\n        <Route render={props => (\r\n          <Body\r\n            appUserProps={{\r\n              clearCurrentUser: this.clearCurrentUser,\r\n              setCurrentUser: this.setCurrentUser,\r\n              loggedIn,\r\n            }}\r\n          />\r\n        )} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","/**\r\n *  Theme Starting Point\r\n */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport ApolloClient from 'apollo-client';\r\nimport { ApolloLink, concat } from 'apollo-link';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport App from './app';\r\n\r\n/**\r\n * Retrieve GraphQL Endpoint\r\n * \r\n * Endpoint retrieved from WordPress on production, but \r\n * must be provided manually for Webpack Dev Server. \r\n * \r\n */\r\n\r\n// Delete window.endpoint and span#graphql as a security measure\r\nconst graphqlDOM = document.querySelector('#graphql');\r\nlet endpoint;\r\nif (graphqlDOM) {\r\n  endpoint = graphqlDOM.getAttribute('data-endpoint');\r\n  graphqlDOM.parentElement.removeChild(graphqlDOM);\r\n}\r\nconst httpLink = new HttpLink({\r\n  uri: (process.env.REACT_APP_APOLLO_CLIENT_URI) ? \r\n    process.env.REACT_APP_APOLLO_CLIENT_URI : endpoint,\r\n  credentials: 'same-origin',\r\n});\r\n\r\n\r\n// Add the authorization to the headers\r\nconst authMiddleware = new ApolloLink((operation, forward) => {\r\n  operation.setContext({\r\n    headers: {\r\n      authorization: localStorage.getItem('user-token') || null,\r\n    } \r\n  });\r\n\r\n  return forward(operation);\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: concat(authMiddleware, httpLink),\r\n  cache: new InMemoryCache({\r\n    dataIdFromObject: object => object.id || null\r\n  }),\r\n});\r\n\r\n// Get app container ID attribute\r\nconst appContainer = document.getElementById((process.env.NODE_ENV === 'production') ? 'page' : 'root');\r\n\r\n/**\r\n * Render App to #root\r\n */\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </ApolloProvider>,\r\n  appContainer,\r\n);\r\n\r\nappContainer.classList.add('loaded');\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}